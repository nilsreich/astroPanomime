---
import Layout from "../layouts/Layout.astro";
import { Image } from "astro:assets";

// Use import.meta.glob to import all .avif images from the specified directory
// The result is an object where keys are paths and values are functions that return a Promise for the module
const imageModules = import.meta.glob<{ default: ImageMetadata }>('../assets/images/*.avif');

// Eagerly load all image metadata
// Object.values(imageModules) gives an array of functions: [() => import(...), () => import(...)]
// We map over them, call each function (which returns a Promise), and await all promises.
const imageAssets: ImageMetadata[] = await Promise.all(
  Object.values(imageModules).map(async (importModule) => {
    const module = await importModule();
    return module.default; // The ImageMetadata is the default export
  })
);

const getRandomElement = (arr: ImageMetadata[]): ImageMetadata | undefined => {
  if (!arr || arr.length === 0) {
    return undefined;
  }
  const randomIndex = Math.floor(Math.random() * arr.length);
  return arr[randomIndex];
};

const initialImageAsset = getRandomElement(imageAssets);

// Create an array of processed image source URLs for the client script
// asset.src contains the path to the optimized image generated by Astro
const imagePathsForClient = imageAssets.map(asset => asset.src);
---

<Layout>
  <div class="bg-neutral-950 h-full flex items-center justify-center p-8">
    {initialImageAsset && imageAssets.length > 0 ? (
      <div class="flex flex-col items-center gap-8" id="image-switcher-container">
        <div class="border-2 rounded-md border-neutral-800 aspect-square overflow-hidden w-full max-w-[600px]">
          <Image
            id="current-image"
            src={initialImageAsset}
            alt="Zufälliges Bild einer Berufsfigur"
            loading="eager"
            width={600}  
            height={600} 
            quality={10} 
            format="avif"
            class="object-cover w-full h-full"
          />
        </div>

        <button
          id="next-image-button"
          disabled={imageAssets.length <= 1}
          class="px-4 py-2 bg-green-600 text-white font-semibold border border-green-700 rounded-md shadow-sm inline-flex items-center justify-center transition-colors duration-150 ease-in-out hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-neutral-950 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Nächstes Bild
        </button>
      </div>
    ) : (
      <div class="text-white">
        Keine Bilder zum Anzeigen vorhanden oder Bilder konnten nicht geladen werden.
      </div>
    )}
  </div>
</Layout>

<script define:vars={{ images: imagePathsForClient, initialSrc: initialImageAsset?.src }}>
  const imageList = images; // Array of optimized image URLs
  // No 'as' type assertion here - this is plain JavaScript for the browser
  const imageElement = document.getElementById('current-image'); 
  const nextButton = document.getElementById('next-image-button');
  
  if (imageList && imageList.length > 0 && imageElement && nextButton) {
    // Preload images
    imageList.forEach((imageSrc) => {
      const img = new Image(); // Correct constructor for HTMLImageElement in JS
      img.src = imageSrc;
    });

    const getRandomElement = (arr) => {
      if (!arr || arr.length === 0) {
        return undefined;
      }
      const randomIndex = Math.floor(Math.random() * arr.length);
      return arr[randomIndex];
    };

    let currentImageSrc = initialSrc || (imageElement ? imageElement.src : null); // Check imageElement existence before accessing .src

    const showNextRandomImage = () => {
      if (!imageElement) return; // Guard against imageElement being null

      if (imageList.length <= 1 && imageList[0] === currentImageSrc) {
        return;
      }

      let nextImageSrc;
      do {
        nextImageSrc = getRandomElement(imageList);
      } while (nextImageSrc === currentImageSrc && imageList.length > 1); 

      if (nextImageSrc) {
        imageElement.src = nextImageSrc;
        imageElement.alt = "Neues zufälliges Bild einer Berufsfigur"; 
        currentImageSrc = nextImageSrc;
      }
    };

    if (imageList.length <= 1) {
        if (nextButton) nextButton.disabled = true; // Check nextButton existence
    } else {
        if (nextButton) nextButton.addEventListener('click', showNextRandomImage); // Check nextButton existence
    }

  } else if (nextButton) {
      nextButton.disabled = true;
  }
</script>